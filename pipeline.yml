trigger:
  branches:
    include:
      - develop
      - master
pr:
  branches:
    include:
      - master
      - develop

pool:
  name: $(poolName)

variables:
  ver: dev

jobs:
  - job: Build_and_Test
    steps:
      - task: GoTool@0
        displayName: 'ensure Go 1.15.2'
        inputs:
          version: '1.15.2'
      - task: Bash@3
        displayName: 'Prepend PATH'
        inputs:
          targetType: 'inline'
          script: |
            echo "##vso[task.prependpath]/tools/go/1.15.2/x64/bin"
          failOnStderr: true
      - task: Go@0
        displayName: 'go get go-junit-report'
        inputs:
          command: get
          arguments: '-u github.com/jstemmer/go-junit-report'
      - task: Go@0
        displayName: 'go get govvv'
        inputs:
          command: get
          arguments: '-u github.com/ahmetb/govvv'
      - task: Bash@3
        displayName: 'go test'
        inputs:
          targetType: 'inline'
          script: |
            go env
            make build
            make pipeline-test | tee tests.output
            go-junit-report < tests.output > report.xml
          failOnStderr: true
        env:
          K8S_VOL_PATH: '/tmp/tests-share'
          K8S_HOST_PATH: '/tests-share'
          CGO_ENABLED: 0
          AZURE_CLIENT_ID: $(clientId)
          AZURE_CLIENT_SECRET: $(clientSecret)
          AZURE_SUBSCRIPTION_ID: $(subscriptionId)
          AZURE_TENANT_ID: $(tenantId)
          VERSION: $(ver)
          GOBIN: "/tools/go/1.15.2/x64/bin"
      - task: PublishTestResults@2
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
          failTaskOnFailedTests: true

  - job: Publish
    dependsOn: Test
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/develop'))
    steps:
      - task: Bash@3
        displayName: 'Set Build Variables'
        inputs:
          targetType: 'inline'
          script: |
            echo "##vso[task.setvariable variable=IMAGE_REPOSITORY]$(make print-IMAGE_REPOSITORY)"
      - task: Bash@3
        displayName: 'Print Variables'
        inputs:
          targetType: 'inline'
          script: |
            echo "IMAGE_REPOSITORY: $(IMAGE_REPOSITORY)"
            echo "Build.BuildId: $(Build.BuildId)"
      - task: Docker@2
        displayName: 'Build and Push Image'
        inputs:
          containerRegistry: $(registryName)
          command: buildAndPush
          repository: $(IMAGE_REPOSITORY)
          tags: $(Build.BuildId)
          Dockerfile: $(System.DefaultWorkingDirectory)/Dockerfile
          buildContext: $(System.DefaultWorkingDirectory)
      - task: CmdLine@2
        displayName: 'Cleanup Local Image'
        inputs:
          script: |
            echo "Removing image"
            echo "---------------------------------------------------------------"
            docker rmi $(registry_name)/$(IMAGE_REPOSITORY):$(Build.BuildId)
